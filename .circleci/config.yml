version: 2
shared:
  dockers:
    ruby: &ruby_docker
      image: "circleci/ruby:2.5"
      environment:
        BUNDLE_JOBS: 8
        BUNDLE_RETRY: 2
        BUNDLE_PATH: "./vendor/bundle"
        RAILS_ENV: "test"
    node: &node_docker
      image: "circleci/node:8.11"
    postgres: &postgres_docker
      image: "circleci/postgres:10-alpine"
      environment:
        POSTGRES_DB: "poutineer_test"
        POSTGRES_USER: "poutineer"
        POSTGRES_PASSWORD: ""
    redis: &redis_docker
      image: "redis:4.0"
  caches:
    git_save: &git_save
      save_cache:
        key: "poutineer-1.0-git-{{ .Branch }}-{{ .Revision }}"
        paths:
          - ".git/"
    git_restore: &git_restore
      restore_cache:
        keys:
          - "poutineer-1.0-git-{{ .Branch }}-{{ .Revision }}"
          - "poutineer-1.0-git-{{ .Branch }}-"
          - "poutineer-1.0-git-"
    bundler_save: &bundler_save
      save_cache:
        key: "poutineer-1.0-bundler-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}"
        paths:
          - "./vendor/bundle"
          - "/usr/local/bundle/config"
    bundler_restore: &bundler_restore
      restore_cache:
        keys:
          - "poutineer-1.0-bundler-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}"
          - "poutineer-1.0-bundler-{{ .Branch }}-"
          - "poutineer-1.0-bundler-"
    npm_save: &npm_save
      save_cache:
        key: "poutineer-1.0-npm-{{ .Branch }}-{{ checksum \"package-lock.json\" }}"
        paths:
          - "./node_modules/"
    npm_restore: &npm_restore
      restore_cache:
        keys:
          - "poutineer-1.0-npm-{{ .Branch }}-{{ checksum \"package-lock.json\" }}"
          - "poutineer-1.0-npm-{{ .Branch }}-"
          - "poutineer-1.0-npm-"
workflows:
  version: 2
  core:
    jobs:
      - "browser_setup"
      - "server_setup"
      -
        auditing:
          requires:
            - "browser_setup"
            - "server_setup"
      -
        rspec:
          requires:
            - "browser_setup"
            - "server_setup"
jobs:
  browser_setup:
    docker:
      - *node_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *git_save
      - *npm_restore
      -
        run:
          name: "Install npm dependencies"
          command: "npm install"
      - *npm_save
  server_setup:
    docker:
      - *ruby_docker
      - *postgres_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *git_save
      - *bundler_restore
      -
        run:
          name: "Install bundler dependencies"
          command: "bundle install"
      - *bundler_save
      -
        run:
          name: "Database Healthcheck"
          command: "dockerize -wait tcp://localhost:5432 -timeout 1m"
      -
        run:
          name: "Adding postgresql to apt sources"
          command: "sudo su -c \"echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' >> /etc/apt/sources.list.d/pgdg.list\""
      -
        run:
          name: "Fetching postgresql apt-key"
          command: "wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -"
      -
        run:
          name: "Installing postgres-client"
          command: "sudo apt-get update && sudo apt-get install postgresql-client-10"
      -
        run:
          name: "Load databsase schema"
          command: "bundle exec rake db:structure:load --trace"

  audit_gemfile:
    docker:
      - *ruby_docker
      - *node_docker
      - *postgres_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *bundler_restore
      -
        run:
          name: "Auditing Bundler"
          command: "bundle exec bundler-audit check --update"
  audit_routes:
    docker:
      - *ruby_docker
      - *node_docker
      - *postgres_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *bundler_restore
      -
        run:
          name: "Auditing Routes"
          command: "FAIL_ON_ERROR=1 bundle exec rake traceroute"
  audit_ruby:
    docker:
      - *ruby_docker
      - *node_docker
      - *postgres_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *bundler_restore
      -
        run:
          name: "Audit Ruby Security"
          command: "bundle exec brakeman"
      -
        run:
          name: "Auditing Ruby"
          command: "bundle exec rubocop"
  audit_javascript:
    docker:
      - *ruby_docker
      - *node_docker
      - *postgres_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *npm_restore
      -
        run:
          name: "Auditing Javascript"
          command: "npm run lint"
  rspec:
    docker:
      - *ruby_docker
      - *postgres_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *bundler_restore
      - *npm_restore
      -
        name: "Running RSpec"
        command: "bundle exec rspec --format RspecJunitFormatter --out ./tmp/rspec/rspec.xml --format progress $(circleci tests glob \"spec/**/*_spec.rb\" | circleci tests split --split-by=timings)"
      -
        store_test_results:
          path: "tmp/rspec/"
      -
        store_artifacts:
          path: "tmp/rspec/"
      -
        store_artifacts:
          path: "logs/"
  jest:
    docker:
      - *node_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *npm_restore
      -
        name: "Running Jest"
        command: "npm run test -- --runInBand --ci --testResultsProcessor='jest-junit'"
        environment:
          JEST_JUNIT_OUTPUT: "tmp/junit/js-test-results.xml"
      -
        store_test_results:
          path: "tmp/junit/"
      -
        store_artifacts:
          path: "tmp/junit/"
      -
        store_artifacts:
          path: "logs/"
