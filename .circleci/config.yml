version: 2
shared:
  dockers:
    ruby: &ruby_docker
      image: "circleci/ruby:2.5.0"
      environment:
        BUNDLE_JOBS: 8
        BUNDLE_PATH: "./vendor/bundle"
        BUNDLE_RETRY: 2
        POSTGRES_HOST: "127.0.0.1"
        POSTGRES_USER: "postgres"
        PORT: 3000
        RAILS_ENV: "test"
    postgres: &postgres_docker
      image: "circleci/postgres:10.4-alpine"
      environment:
        POSTGRES_DB: "application"
        POSTGRES_USER: "postgres"
    redis: &redis_docker
      image: "redis:5.0.3"
  caches:
    git_save: &git_save
      save_cache:
        key: "poutineer-v1-git-{{ .Branch }}-{{ .Revision }}"
        paths:
          - ".git/"
    git_restore: &git_restore
      restore_cache:
        keys:
          - "poutineer-v1-git-{{ .Branch }}-{{ .Revision }}"
          - "poutineer-v1-git-{{ .Branch }}-"
          - "poutineer-v1-git-"
    bundler_save: &bundler_save
      save_cache:
        key: 'poutineer-v1-bundler-{{ .Branch }}-{{ checksum "Gemfile.lock" }}'
        paths:
          - "./vendor/bundle"
          - "/usr/local/bundle/config"
    bundler_restore: &bundler_restore
      restore_cache:
        keys:
          - 'poutineer-v1-bundler-{{ .Branch }}-{{ checksum "Gemfile.lock" }}'
          - "poutineer-v1-bundler-{{ .Branch }}-"
          - "poutineer-v1-bundler-"
workflows:
  version: 2
  core:
    jobs:
      - server_dependencies_setup:
          context: "Rails Environment"
      - bundler_audit:
          context: "Rails Environment"
          requires:
            - "server_dependencies_setup"
      - brakeman:
          context: "Rails Environment"
          requires:
            - "server_dependencies_setup"
      - rubocop:
          context: "Rails Environment"
          requires:
            - "server_dependencies_setup"
      - rspec:
          context: "Rails Environment"
          requires:
            - "server_dependencies_setup"
jobs:
  server_dependencies_setup:
    docker:
      - *ruby_docker
    steps:
      - *git_restore
      - "checkout"
      - *git_save
      - *bundler_restore
      - run:
          name: "Install bundler dependencies"
          command: "bundle check || bundle install"
      - *bundler_save
  bundler_audit:
    docker:
      - *ruby_docker
    steps:
      - *git_restore
      - "checkout"
      - *bundler_restore
      - run:
          name: "Running bundler-audit"
          command: "bundle exec bundler-audit check --update"
  brakeman:
    docker:
      - *ruby_docker
    steps:
      - *git_restore
      - "checkout"
      - *bundler_restore
      - run:
          name: "Running brakeman"
          command: "bundle exec brakeman"
  rubocop:
    docker:
      - *ruby_docker
    steps:
      - *git_restore
      - "checkout"
      - *bundler_restore
      - run:
          name: "Running rubocop"
          command: "bundle exec rubocop --config .rubocop/config.yml --lint"
  rspec:
    docker:
      - *ruby_docker
      - *postgres_docker
      - *redis_docker
    steps:
      - *git_restore
      - "checkout"
      - *bundler_restore
      - run:
          name: "Database Healthcheck"
          command: "dockerize -wait tcp://localhost:5432 -timeout 1m"
      - run:
          name: "Adding postgresql to apt sources"
          command: 'sudo su -c "echo ''deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main'' >> /etc/apt/sources.list.d/pgdg.list"'
      - run:
          name: "Fetching postgresql apt-key"
          command: "wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -"
      - run:
          name: "Installing postgres-client"
          command: "sudo apt-get update && sudo apt-get install postgresql-client-10"
      - run:
          name: "Load databsase schema"
          command: "bundle exec rake db:create --trace"
      - run:
          name: "Running RSpec"
          command: 'bundle exec rspec --format RspecJunitFormatter --out ./tmp/rspec/rspec.xml --format progress $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)'
      - store_test_results:
          path: "tmp/rspec/"
      - store_artifacts:
          path: "tmp/rspec/"
      - store_artifacts:
          path: "logs/"
