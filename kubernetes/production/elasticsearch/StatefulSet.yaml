---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: elasticsearch
  labels:
    group: elasticsearch
spec:
  serviceName: elasticsearch-headless
  selector:
    matchLabels:
      group: elasticsearch
      role: database
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
  template:
    metadata:
      name: elasticsearch
      labels:
        group: elasticsearch
        role: database
    spec:
      securityContext:
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: group
                    operator: In
                    values:
                      - elasticsearch
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      initContainers:
        - name: configure-sysctl
          securityContext:
            runAsUser: 0
            privileged: true
          image: "docker.elastic.co/elasticsearch/elasticsearch:6.6.2"
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
      containers:
        - name: elasticsearch
          image: "docker.elastic.co/elasticsearch/elasticsearch:6.6.2"
          imagePullPolicy: IfNotPresent
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
            exec:
              command:
                - "sh"
                - "-c"
                - |
                  #!/usr/bin/env bash -e
                  # If the node is starting up wait for the cluster to be green
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file

                  http () {
                      local path="${1}"
                      if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                        BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                      else
                        BASIC_AUTH=''
                      fi
                      curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200${path}
                  }

                  if [ -f "${START_FILE}" ]; then
                      echo 'Elasticsearch is already running, lets check the node is healthy'
                      http "/"
                  else
                      echo 'Waiting for elasticsearch cluster to become green'
                      if http "/_cluster/health?wait_for_status=green&timeout=1s" ; then
                          touch ${START_FILE}
                          exit 0
                      else
                          echo 'Cluster is not yet green'
                          exit 1
                      fi
                  fi
          ports:
            - containerPort: 9200
            - containerPort: 9300
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: discovery.zen.ping.unicast.hosts
              value: "elasticsearch-headless"
            - name: cluster.name
              value: "elasticsearch"
            - name: discovery.zen.minimum_master_nodes
              value: "2"
            - name: network.host
              value: "0.0.0.0"
            - name: ES_JAVA_OPTS
              value: "-Xmx1g -Xms1g"
            - name: node.master
              value: "true"
            - name: node.data
              value: "true"
            - name: node.ingest
              value: "true"
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data
