#!/usr/bin/env ruby

require 'securerandom'
require 'yaml'

USERS = {
  "POSTGRES_SUPERUSER_PASSWORD" => "postgres",
  "POSTGRES_APPLICATION_PASSWORD" => "application",
  "POSTGRES_PGBOUNCER_PASSWORD" => "pgbouncer",
  "POSTGRES_SENTRY_PASSWORD" => "sentry",
  "POSTGRES_METABASE_PASSWORD" => "metabase",
}


# Get the sample secrets file
secrets_sample_raw = File.read(File.join("kubernetes", "production", "runtime-secrets.yaml.sample"))
secrets_sample = YAML.safe_load(secrets_sample_raw)

# Get the pgbouncer configuration file
pgbouncer_configuration_raw = File.read(File.join("kubernetes", "production", "pgbouncer", "config-map.yaml"))
pgbouncer_configuration = YAML.safe_load(pgbouncer_configuration_raw)

# Find all replacable keys
keys = secrets_sample_raw.scan(/\{\{\w+\}\}/).to_a

# Generate secrets for each key
secrets_raw = keys.reduce(secrets_sample_raw) do |template, key|
  if key == "{{RAILS_MASTER_KEY}}"
    template.gsub(key, File.read(File.join("config", "master.key")))
  else
    template.gsub(key, SecureRandom.hex())
  end
end
secrets = YAML.safe_load(secrets_raw)

# Generate a pgbouncer md5 authentication value for each
authentications = USERS.map do |property, username|
  "\"#{username}\" \"md5#{`echo -n "#{username}#{secrets.fetch("stringData").fetch(property)}" | openssl md5`.chomp}\""
end.join("\n")

# Finally, write to the disk
File.write(File.join("kubernetes", "production", "runtime-secrets.yaml"), YAML.dump(secrets))
File.write(File.join("kubernetes", "production", "pgbouncer", "config-map.yaml"), YAML.dump(pgbouncer_configuration.merge({
  "data" => pgbouncer_configuration.fetch("data").merge({
    "userlist.txt" => "#{authentications}"
  })
})))
